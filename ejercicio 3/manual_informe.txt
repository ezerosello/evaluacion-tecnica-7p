##### Explicación en primera persona del proceso de desarrollo. #####

Para el desarrollo de la aplicación, decidí comenzar por el Dashboard de visualización de datos. Como no tengo experiencia usando React, me ayudé mucho de las inteligencias artificiales. Para la creación del proyecto, por recomendación de ChatGPT, utilicé Vite, ejecutando los siguientes comandos para crear y levantar un servidor:

        npm create vite@latest client-dashboard -- --template react-ts
        cd client-dashboard
        npm install
        npm run dev

De esta forma quedó definida una estructura que completé creando las carpetas src/components, src/hooks, src/utils y src/types.

Una vez definida la estructura del proyecto, definí en la primera iteración:
    
src/types:
    - sales.ts

src/hooks:
    - useSalesData.ts

src/utils:
    - cleanData.ts
    - metrics.ts

Para sumar el gráfico de ventas por día, incluí:

src/components:
    - SalesChart.tsx

Y, para agregar los filtros de fecha y producto:

src/hooks:
    - userFilters.ts

src/components:
    - Filters.tsx

src/utils:
    - applyFilters.ts

Una vez que tuve listo el Client Dashboard, de la misma forma utilicé Vite para crear el proyecto de qa-tool.

Empecé por crear la función wrongRegisters, que me devuelve los registros con errores. Y con esta función cree, con ayuda de IA, la primera vista App.tsx que mostraba en formato json los elementos con errores.

ChatGPT me facilitó el App.tsx con una primera versión de la tabla, que modifiqué utilizando el archivo App.css

Cuando ya tuve la vista de la tabla, agregué los botones para corregir datos y exportarlos.
Armé el backend y le pedí ayuda a Copilot para hacer las funciones asociadas a los botones y para exportar los datos al backend.

Finalmente, para implementar los tests en la qa-tool, le compartí mi código a Copilot y le pedí que me arme tests para probar la herramienta. En esta parte, tuve problemas en la integración con Cypress y Jest que no llegué a solucionar, por lo que en la versión que estoy entregando me falta este requisito.



##### Prompts utilizados #####

Le compartí a ChatGPT el proyecto que quería armar y utilicé los siguentes prompts:

- "Cómo debería comenzar el proyecto del dashboard": me indicó cómo crear el proyecto con Vite y me compartió unos archivos iniciales: sales.ts, useSalesData.ts, cleanData.ts y metrics.ts.

En su respuesta, ChatGPT dijo:
"El siguiente paso sería darle un poco de vida con gráficos usando Chart.js. Por ejemplo: un gráfico de barras con ventas por día.

¿Querés que te arme directamente un ejemplo con react-chartjs-2 para que lo pegues y ya veas un gráfico en tu dashboard?"

Respondí "si" y me compartió un SalesChart.tsx inicial.

- "Archivo para aplicar los filtros de fecha y producto en mi dashboard": me recomendó incluir los archivos userFilters.ts, Filters.ts y applyFilters.ts

- "Cómo debería encarar el qa-tool"

- "Función para exportar los datos corregidos"

- "Tests E2E con Cypress"



##### Fragmentos de código generados por IA y cómo se adaptaron manualmente #####

En Client Dashboard:

    - Adapté los fragmentos de código generados por IA para solucionar problemas de importaciones (por ejemplo, cambiar "import { Sale } from "../types/sales"" por "import type { Sale } from "../types/sales""). 

    - Adapté el archivo App.tsx para que tome los estilos de App.css, y a este último le realicé modificaciones para que el Dashboard sea visualmente más estético

En QA-Tool:

    - Adapté el archivo cleanData.ts generado por IA del Dashboard para filtrar según la necesidad del qa-tool.

    - Adapté el archivo App.css para mejorar un poco los estilos de la tabla.



##### Decisiones tomadas independientemente de las sugerencias de la IA #####

Independientemente de las sugerencias de la IA, tomé decisiones sobre la organización del trabajo: comenzar con el Dashboard para el cliente y, una vez que lo tuviera listo, continuar con la herramienta de QA. 

Agregué el filtro de precio mayor a 0.

Tomé la decisión de agregar un backend para comunicar las dos aplicaciones y poder pasar el json de datos corregidos desde qa-tool hacia el dashboard.

Tomé la decisión de que el sales_data.json se guarde en el backend, para que el client dashboard y la herramienta qa accedan a un mismo archivo.